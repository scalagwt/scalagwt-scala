name {
  name: "Try"
}
modifiers {
  isPublic: true
}
ext {
  pkg: "java.lang"
  name: "Object"
}
implements {
  pkg: "scala"
  name: "ScalaObject"
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "simpleTry"
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: Try
          tryStat {
            block {
              type: Block
              block {
              }
            }
            catch {
              tpe {
                pkg: "java.lang"
                name: "Throwable"
              }
              param: "ex$1"
              body {
                type: Block
                block {
                  statement {
                    type: VarDef
                    varDef {
                      tpe {
                        type: Named
                        namedType {
                          pkg: "java.lang"
                          name: "Throwable"
                        }
                      }
                      name: "temp1"
                      initializer {
                        type: VarRef
                        varRef {
                          name: "ex$1"
                        }
                      }
                    }
                  }
                  statement {
                    type: If
                    ifStat {
                      condition {
                        type: InstanceOf
                        instanceOf {
                          expr {
                            type: VarRef
                            varRef {
                              name: "temp1"
                            }
                          }
                          tpe {
                            type: Named
                            namedType {
                              pkg: "java.lang"
                              name: "Exception"
                            }
                          }
                        }
                      }
                      then {
                        type: Block
                        block {
                          statement {
                            type: VarDef
                            varDef {
                              tpe {
                                type: Named
                                namedType {
                                  pkg: "java.lang"
                                  name: "Exception"
                                }
                              }
                              name: "temp2"
                              initializer {
                                type: Cast
                                cast {
                                  expr {
                                    type: VarRef
                                    varRef {
                                      name: "temp1"
                                    }
                                  }
                                  tpe {
                                    type: Named
                                    namedType {
                                      pkg: "java.lang"
                                      name: "Exception"
                                    }
                                  }
                                }
                              }
                            }
                          }
                          statement {
                            type: VarDef
                            varDef {
                              tpe {
                                type: Named
                                namedType {
                                  pkg: "java.lang"
                                  name: "Exception"
                                }
                              }
                              name: "x"
                              initializer {
                                type: VarRef
                                varRef {
                                  name: "temp2"
                                }
                              }
                            }
                          }
                          statement {
                            type: If
                            ifStat {
                              condition {
                                type: MethodCall
                                methodCall {
                                  receiver {
                                    type: ThisRef
                                  }
                                  signature {
                                    name: "gd1$1"
                                    owner {
                                      name: "Try"
                                    }
                                    paramType {
                                      type: Named
                                      namedType {
                                        pkg: "java.lang"
                                        name: "Exception"
                                      }
                                    }
                                    returnType {
                                      type: Primitive
                                      primitiveType: Boolean
                                    }
                                  }
                                  argument {
                                    type: VarRef
                                    varRef {
                                      name: "x"
                                    }
                                  }
                                }
                              }
                              then {
                                type: Block
                                block {
                                  statement {
                                    type: VarDef
                                    varDef {
                                      tpe {
                                        type: Named
                                        namedType {
                                          pkg: "java.lang"
                                          name: "Exception"
                                        }
                                      }
                                      name: "$1$"
                                    }
                                  }
                                  statement {
                                    type: LabelledStat
                                    labelledStat {
                                      label: "body$percent01"
                                      statement {
                                        type: While
                                        whileStat {
                                          condition {
                                            type: Literal
                                            literal {
                                              type: Boolean
                                              boolValue: true
                                            }
                                          }
                                          body {
                                            type: Block
                                            block {
                                              statement {
                                                type: Block
                                                block {
                                                  statement {
                                                    type: Expr
                                                    expr {
                                                      type: MethodCall
                                                      methodCall {
                                                        receiver {
                                                          type: FieldRef
                                                          fieldRef {
                                                            enclosingType {
                                                              pkg: "scala"
                                                              name: "Predef$"
                                                            }
                                                            name: "MODULE$"
                                                          }
                                                        }
                                                        signature {
                                                          name: "println"
                                                          owner {
                                                            pkg: "scala"
                                                            name: "Predef$"
                                                          }
                                                          paramType {
                                                            type: Named
                                                            namedType {
                                                              pkg: "java.lang"
                                                              name: "Object"
                                                            }
                                                          }
                                                          returnType {
                                                            type: Void
                                                          }
                                                        }
                                                        argument {
                                                          type: Binary
                                                          binary {
                                                            op: Concat
                                                            lhs {
                                                              type: Literal
                                                              literal {
                                                                type: String
                                                                stringValue: "first case "
                                                              }
                                                            }
                                                            rhs {
                                                              type: VarRef
                                                              varRef {
                                                                name: "x"
                                                              }
                                                            }
                                                            tpe {
                                                              type: Named
                                                              namedType {
                                                                pkg: "java.lang"
                                                                name: "String"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                              statement {
                                                type: Break
                                                break {
                                                  label: "body$percent01"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              elsee {
                                type: Block
                                block {
                                  statement {
                                    type: Expr
                                    expr {
                                      type: MethodCall
                                      methodCall {
                                        receiver {
                                          type: FieldRef
                                          fieldRef {
                                            enclosingType {
                                              pkg: "scala"
                                              name: "Predef$"
                                            }
                                            name: "MODULE$"
                                          }
                                        }
                                        signature {
                                          name: "println"
                                          owner {
                                            pkg: "scala"
                                            name: "Predef$"
                                          }
                                          paramType {
                                            type: Named
                                            namedType {
                                              pkg: "java.lang"
                                              name: "Object"
                                            }
                                          }
                                          returnType {
                                            type: Void
                                          }
                                        }
                                        argument {
                                          type: Binary
                                          binary {
                                            op: Concat
                                            lhs {
                                              type: Literal
                                              literal {
                                                type: String
                                                stringValue: "second case "
                                              }
                                            }
                                            rhs {
                                              type: VarRef
                                              varRef {
                                                name: "temp2"
                                              }
                                            }
                                            tpe {
                                              type: Named
                                              namedType {
                                                pkg: "java.lang"
                                                name: "String"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      elsee {
                        type: Block
                        block {
                          statement {
                            type: Throw
                            throwStat {
                              expression {
                                type: VarRef
                                varRef {
                                  name: "ex$1"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "typedWildcardTry"
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: Try
          tryStat {
            block {
              type: Block
              block {
              }
            }
            catch {
              tpe {
                pkg: "java.lang"
                name: "ClassCastException"
              }
              param: "$2$"
              body {
                type: Block
                block {
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "wildcardTry"
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: Try
          tryStat {
            block {
              type: Block
              block {
              }
            }
            catch {
              tpe {
                pkg: "java.lang"
                name: "Throwable"
              }
              param: "$3$"
              body {
                type: Block
                block {
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "tryPlusFinally"
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: Try
          tryStat {
            block {
              type: Block
              block {
              }
            }
            finalizer {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: MethodCall
                    methodCall {
                      receiver {
                        type: FieldRef
                        fieldRef {
                          enclosingType {
                            pkg: "scala"
                            name: "Predef$"
                          }
                          name: "MODULE$"
                        }
                      }
                      signature {
                        name: "println"
                        owner {
                          pkg: "scala"
                          name: "Predef$"
                        }
                        paramType {
                          type: Named
                          namedType {
                            pkg: "java.lang"
                            name: "Object"
                          }
                        }
                        returnType {
                          type: Void
                        }
                      }
                      argument {
                        type: Literal
                        literal {
                          type: String
                          stringValue: "finally"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "catchAndPassToLambda"
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: Try
          tryStat {
            block {
              type: Block
              block {
              }
            }
            catch {
              tpe {
                pkg: "java.lang"
                name: "Exception"
              }
              param: "ex$2"
              body {
                type: Block
                block {
                  statement {
                    type: VarDef
                    varDef {
                      tpe {
                        type: Named
                        namedType {
                          pkg: "scala"
                          name: "Function0"
                        }
                      }
                      name: "f"
                      initializer {
                        type: NewObject
                        newObject {
                          clazz {
                            name: "Try$$anonfun$1"
                          }
                          signature {
                            name: "new"
                            owner {
                              name: "Try$$anonfun$1"
                            }
                            paramType {
                              type: Named
                              namedType {
                                name: "Try"
                              }
                            }
                            paramType {
                              type: Named
                              namedType {
                                pkg: "java.lang"
                                name: "Exception"
                              }
                            }
                            returnType {
                              type: Named
                              namedType {
                                name: "Try$$anonfun$1"
                              }
                            }
                          }
                          argument {
                            type: ThisRef
                          }
                          argument {
                            type: VarRef
                            varRef {
                              name: "ex$2"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPrivate: true
    isFinal: true
  }
  method {
    name: "gd1$1"
    paramDef {
      name: "x$1"
      tpe {
        type: Named
        namedType {
          pkg: "java.lang"
          name: "Exception"
        }
      }
    }
    returnType {
      type: Primitive
      primitiveType: Boolean
    }
    body {
      type: Block
      block {
        statement {
          type: Return
          returnStat {
            expression {
              type: MethodCall
              methodCall {
                signature {
                  name: "equals"
                  owner {
                    pkg: "scala.runtime"
                    name: "BoxesRunTime"
                  }
                  paramType {
                    type: Named
                    namedType {
                      pkg: "java.lang"
                      name: "Object"
                    }
                  }
                  paramType {
                    type: Named
                    namedType {
                      pkg: "java.lang"
                      name: "Object"
                    }
                  }
                  returnType {
                    type: Primitive
                    primitiveType: Boolean
                  }
                }
                argument {
                  type: MethodCall
                  methodCall {
                    receiver {
                      type: VarRef
                      varRef {
                        name: "x$1"
                      }
                    }
                    signature {
                      name: "getMessage"
                      owner {
                        pkg: "java.lang"
                        name: "Throwable"
                      }
                      returnType {
                        type: Named
                        namedType {
                          pkg: "java.lang"
                          name: "String"
                        }
                      }
                    }
                  }
                }
                argument {
                  type: Literal
                  literal {
                    type: String
                    stringValue: "test"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    isConstructor: true
    name: "new"
    returnType {
      type: Named
      namedType {
        name: "Try"
      }
    }
    body {
      type: Block
      block {
        statement {
          type: Expr
          expr {
            type: MethodCall
            methodCall {
              receiver {
                type: ThisRef
              }
              signature {
                name: "new"
                owner {
                  pkg: "java.lang"
                  name: "Object"
                }
                returnType {
                  type: Named
                  namedType {
                    pkg: "java.lang"
                    name: "Object"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
