name {
  name: "PatternMatching"
}
modifiers {
  isPublic: true
}
ext {
  pkg: "java.lang"
  name: "Object"
}
implements {
  pkg: "scala"
  name: "ScalaObject"
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "simplePattern"
    paramDef {
      name: "xs"
      tpe {
        type: Named
        namedType {
          pkg: "scala.collection.immutable"
          name: "List"
        }
      }
    }
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: Expr
          expr {
            type: MethodCall
            methodCall {
              receiver {
                type: FieldRef
                fieldRef {
                  enclosingType {
                    pkg: "scala.sys"
                    name: "package$"
                  }
                  name: "MODULE$"
                }
              }
              signature {
                name: "error"
                owner {
                  pkg: "scala.sys"
                  name: "package$"
                }
                paramType {
                  type: Named
                  namedType {
                    pkg: "java.lang"
                    name: "String"
                  }
                }
                returnType {
                  type: Named
                  namedType {
                    pkg: "scala.runtime"
                    name: "Nothing$"
                  }
                }
              }
              argument {
                type: Literal
                literal {
                  type: String
                  stringValue: "whack! you stepped on broken handling of jribble backend."
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "shouldBeTranslatedToSwitch"
    paramDef {
      name: "x"
      tpe {
        type: Primitive
        primitiveType: Int
      }
    }
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "temp7"
            initializer {
              type: VarRef
              varRef {
                name: "x"
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "$1$"
            initializer {
              type: VarRef
              varRef {
                name: "temp7"
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "java.lang"
                name: "String"
              }
            }
            name: "$2$"
          }
        }
        statement {
          type: Switch
          switchStat {
            expression {
              type: VarRef
              varRef {
                name: "$1$"
              }
            }
            case {
              constant {
                type: Int
                intValue: 1
              }
              statement {
                type: Block
                block {
                  statement {
                    type: Expr
                    expr {
                      type: Assignment
                      assignment {
                        lhs {
                          type: VarRef
                          varRef {
                            name: "$2$"
                          }
                        }
                        rhs {
                          type: Literal
                          literal {
                            type: String
                            stringValue: "got one or two"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            case {
              constant {
                type: Int
                intValue: 2
              }
              statement {
                type: Block
                block {
                  statement {
                    type: Expr
                    expr {
                      type: Assignment
                      assignment {
                        lhs {
                          type: VarRef
                          varRef {
                            name: "$2$"
                          }
                        }
                        rhs {
                          type: Literal
                          literal {
                            type: String
                            stringValue: "got one or two"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            case {
              constant {
                type: Int
                intValue: 0
              }
              statement {
                type: Block
                block {
                  statement {
                    type: Expr
                    expr {
                      type: Assignment
                      assignment {
                        lhs {
                          type: VarRef
                          varRef {
                            name: "$2$"
                          }
                        }
                        rhs {
                          type: Literal
                          literal {
                            type: String
                            stringValue: "got zero"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            defaultCase {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: Assignment
                    assignment {
                      lhs {
                        type: VarRef
                        varRef {
                          name: "$2$"
                        }
                      }
                      rhs {
                        type: Literal
                        literal {
                          type: String
                          stringValue: "got something else"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "java.lang"
                name: "String"
              }
            }
            name: "msg"
            initializer {
              type: VarRef
              varRef {
                name: "$2$"
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "unpackTuple"
    paramDef {
      name: "t"
      tpe {
        type: Named
        namedType {
          pkg: "scala"
          name: "Tuple2"
        }
      }
    }
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "scala"
                name: "Tuple2"
              }
            }
            name: "temp8"
            initializer {
              type: VarRef
              varRef {
                name: "t"
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "scala"
                name: "Tuple2"
              }
            }
            name: "$3$"
          }
        }
        statement {
          type: If
          ifStat {
            condition {
              type: Binary
              binary {
                op: NotEqual
                lhs {
                  type: VarRef
                  varRef {
                    name: "temp8"
                  }
                }
                rhs {
                  type: Literal
                  literal {
                    type: Null
                  }
                }
                tpe {
                  type: Primitive
                  primitiveType: Boolean
                }
              }
            }
            then {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: Assignment
                    assignment {
                      lhs {
                        type: VarRef
                        varRef {
                          name: "$3$"
                        }
                      }
                      rhs {
                        type: NewObject
                        newObject {
                          clazz {
                            pkg: "scala"
                            name: "Tuple2$mcII$sp"
                          }
                          signature {
                            name: "new"
                            owner {
                              pkg: "scala"
                              name: "Tuple2$mcII$sp"
                            }
                            paramType {
                              type: Primitive
                              primitiveType: Int
                            }
                            paramType {
                              type: Primitive
                              primitiveType: Int
                            }
                            returnType {
                              type: Named
                              namedType {
                                pkg: "scala"
                                name: "Tuple2$mcII$sp"
                              }
                            }
                          }
                          argument {
                            type: MethodCall
                            methodCall {
                              signature {
                                name: "unboxToInt"
                                owner {
                                  pkg: "scala.runtime"
                                  name: "BoxesRunTime"
                                }
                                paramType {
                                  type: Named
                                  namedType {
                                    pkg: "java.lang"
                                    name: "Object"
                                  }
                                }
                                returnType {
                                  type: Primitive
                                  primitiveType: Int
                                }
                              }
                              argument {
                                type: MethodCall
                                methodCall {
                                  receiver {
                                    type: VarRef
                                    varRef {
                                      name: "temp8"
                                    }
                                  }
                                  signature {
                                    name: "_1"
                                    owner {
                                      pkg: "scala"
                                      name: "Tuple2"
                                    }
                                    returnType {
                                      type: Named
                                      namedType {
                                        pkg: "java.lang"
                                        name: "Object"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          argument {
                            type: MethodCall
                            methodCall {
                              signature {
                                name: "unboxToInt"
                                owner {
                                  pkg: "scala.runtime"
                                  name: "BoxesRunTime"
                                }
                                paramType {
                                  type: Named
                                  namedType {
                                    pkg: "java.lang"
                                    name: "Object"
                                  }
                                }
                                returnType {
                                  type: Primitive
                                  primitiveType: Int
                                }
                              }
                              argument {
                                type: MethodCall
                                methodCall {
                                  receiver {
                                    type: VarRef
                                    varRef {
                                      name: "temp8"
                                    }
                                  }
                                  signature {
                                    name: "_2"
                                    owner {
                                      pkg: "scala"
                                      name: "Tuple2"
                                    }
                                    returnType {
                                      type: Named
                                      namedType {
                                        pkg: "java.lang"
                                        name: "Object"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            elsee {
              type: Block
              block {
                statement {
                  type: Throw
                  throwStat {
                    expression {
                      type: NewObject
                      newObject {
                        clazz {
                          pkg: "scala"
                          name: "MatchError"
                        }
                        signature {
                          name: "new"
                          owner {
                            pkg: "scala"
                            name: "MatchError"
                          }
                          paramType {
                            type: Named
                            namedType {
                              pkg: "java.lang"
                              name: "Object"
                            }
                          }
                          returnType {
                            type: Named
                            namedType {
                              pkg: "scala"
                              name: "MatchError"
                            }
                          }
                        }
                        argument {
                          type: VarRef
                          varRef {
                            name: "temp8"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "scala"
                name: "Tuple2"
              }
            }
            name: "x$1"
            initializer {
              type: VarRef
              varRef {
                name: "$3$"
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "x"
            initializer {
              type: MethodCall
              methodCall {
                receiver {
                  type: VarRef
                  varRef {
                    name: "x$1"
                  }
                }
                signature {
                  name: "_1$mcI$sp"
                  owner {
                    pkg: "scala"
                    name: "Tuple2"
                  }
                  returnType {
                    type: Primitive
                    primitiveType: Int
                  }
                }
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "y"
            initializer {
              type: MethodCall
              methodCall {
                receiver {
                  type: VarRef
                  varRef {
                    name: "x$1"
                  }
                }
                signature {
                  name: "_2$mcI$sp"
                  owner {
                    pkg: "scala"
                    name: "Tuple2"
                  }
                  returnType {
                    type: Primitive
                    primitiveType: Int
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "throwInPatternBranch"
    paramDef {
      name: "x"
      tpe {
        type: Primitive
        primitiveType: Int
      }
    }
    returnType {
      type: Primitive
      primitiveType: Int
    }
    body {
      type: Block
      block {
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "temp11"
            initializer {
              type: VarRef
              varRef {
                name: "x"
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "x"
            initializer {
              type: VarRef
              varRef {
                name: "temp11"
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "$4$"
          }
        }
        statement {
          type: If
          ifStat {
            condition {
              type: MethodCall
              methodCall {
                receiver {
                  type: ThisRef
                }
                signature {
                  name: "gd1$1"
                  owner {
                    name: "PatternMatching"
                  }
                  paramType {
                    type: Primitive
                    primitiveType: Int
                  }
                  returnType {
                    type: Primitive
                    primitiveType: Boolean
                  }
                }
                argument {
                  type: VarRef
                  varRef {
                    name: "x"
                  }
                }
              }
            }
            then {
              type: Block
              block {
                statement {
                  type: VarDef
                  varDef {
                    tpe {
                      type: Primitive
                      primitiveType: Int
                    }
                    name: "$5$"
                  }
                }
                statement {
                  type: LabelledStat
                  labelledStat {
                    label: "body$percent03"
                    statement {
                      type: While
                      whileStat {
                        condition {
                          type: Literal
                          literal {
                            type: Boolean
                            boolValue: true
                          }
                        }
                        body {
                          type: Block
                          block {
                            statement {
                              type: Block
                              block {
                                statement {
                                  type: Throw
                                  throwStat {
                                    expression {
                                      type: NewObject
                                      newObject {
                                        clazz {
                                          pkg: "java.lang"
                                          name: "RuntimeException"
                                        }
                                        signature {
                                          name: "new"
                                          owner {
                                            pkg: "java.lang"
                                            name: "RuntimeException"
                                          }
                                          paramType {
                                            type: Named
                                            namedType {
                                              pkg: "java.lang"
                                              name: "String"
                                            }
                                          }
                                          returnType {
                                            type: Named
                                            namedType {
                                              pkg: "java.lang"
                                              name: "RuntimeException"
                                            }
                                          }
                                        }
                                        argument {
                                          type: Literal
                                          literal {
                                            type: String
                                            stringValue: "don\'t like zeros"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            statement {
                              type: Break
                              break {
                                label: "body$percent03"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            elsee {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: Assignment
                    assignment {
                      lhs {
                        type: VarRef
                        varRef {
                          name: "$4$"
                        }
                      }
                      rhs {
                        type: VarRef
                        varRef {
                          name: "temp11"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statement {
          type: Return
          returnStat {
            expression {
              type: VarRef
              varRef {
                name: "$4$"
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPrivate: true
    isFinal: true
  }
  method {
    name: "gd1$1"
    paramDef {
      name: "x$1"
      tpe {
        type: Primitive
        primitiveType: Int
      }
    }
    returnType {
      type: Primitive
      primitiveType: Boolean
    }
    body {
      type: Block
      block {
        statement {
          type: Return
          returnStat {
            expression {
              type: Binary
              binary {
                op: Equal
                lhs {
                  type: VarRef
                  varRef {
                    name: "x$1"
                  }
                }
                rhs {
                  type: Literal
                  literal {
                    type: Int
                    intValue: 0
                  }
                }
                tpe {
                  type: Primitive
                  primitiveType: Boolean
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    isConstructor: true
    name: "new"
    returnType {
      type: Named
      namedType {
        name: "PatternMatching"
      }
    }
    body {
      type: Block
      block {
        statement {
          type: Expr
          expr {
            type: MethodCall
            methodCall {
              receiver {
                type: ThisRef
              }
              signature {
                name: "new"
                owner {
                  pkg: "java.lang"
                  name: "Object"
                }
                returnType {
                  type: Named
                  namedType {
                    pkg: "java.lang"
                    name: "Object"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
