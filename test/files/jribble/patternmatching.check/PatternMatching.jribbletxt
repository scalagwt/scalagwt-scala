name {
  name: "PatternMatching"
}
modifiers {
  isPublic: true
}
ext {
  pkg: "java.lang"
  name: "Object"
}
implements {
  pkg: "scala"
  name: "ScalaObject"
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "simplePattern"
    paramDef {
      name: "xs"
      tpe {
        type: Named
        namedType {
          pkg: "scala.collection.immutable"
          name: "List"
        }
      }
    }
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "scala"
                name: "Option"
              }
            }
            name: "zero7"
            initializer {
              type: FieldRef
              fieldRef {
                enclosingType {
                  pkg: "scala"
                  name: "None$"
                }
                name: "MODULE$"
                tpe {
                  type: Named
                  namedType {
                    pkg: "scala"
                    name: "None$"
                  }
                }
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "scala.collection.immutable"
                name: "List"
              }
            }
            name: "x1"
            initializer {
              type: VarRef
              varRef {
                name: "xs"
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "scala.runtime"
                name: "BoxedUnit"
              }
            }
            name: "matchRes8"
            initializer {
              type: FieldRef
              fieldRef {
                enclosingType {
                  pkg: "scala.runtime"
                  name: "BoxedUnit"
                }
                name: "UNIT"
                tpe {
                  type: Named
                  namedType {
                    pkg: "scala.runtime"
                    name: "BoxedUnit"
                  }
                }
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Boolean
            }
            name: "keepGoing6"
            initializer {
              type: Literal
              literal {
                type: Boolean
                boolValue: true
              }
            }
          }
        }
        statement {
          type: Block
          block {
            statement {
              type: Block
              block {
                statement {
                  type: If
                  ifStat {
                    condition {
                      type: MethodCall
                      methodCall {
                        signature {
                          name: "equals"
                          owner {
                            pkg: "scala.runtime"
                            name: "BoxesRunTime"
                          }
                          paramType {
                            type: Named
                            namedType {
                              pkg: "java.lang"
                              name: "Object"
                            }
                          }
                          paramType {
                            type: Named
                            namedType {
                              pkg: "java.lang"
                              name: "Object"
                            }
                          }
                          returnType {
                            type: Primitive
                            primitiveType: Boolean
                          }
                        }
                        argument {
                          type: FieldRef
                          fieldRef {
                            enclosingType {
                              pkg: "scala.collection.immutable"
                              name: "Nil$"
                            }
                            name: "MODULE$"
                            tpe {
                              type: Named
                              namedType {
                                pkg: "scala.collection.immutable"
                                name: "Nil$"
                              }
                            }
                          }
                        }
                        argument {
                          type: VarRef
                          varRef {
                            name: "x1"
                          }
                        }
                      }
                    }
                    then {
                      type: Block
                      block {
                        statement {
                          type: VarDef
                          varDef {
                            tpe {
                              type: Named
                              namedType {
                                pkg: "scala.collection.immutable"
                                name: "List"
                              }
                            }
                            name: "x4"
                            initializer {
                              type: VarRef
                              varRef {
                                name: "x1"
                              }
                            }
                          }
                        }
                        statement {
                          type: Expr
                          expr {
                            type: Assignment
                            assignment {
                              lhs {
                                type: VarRef
                                varRef {
                                  name: "keepGoing6"
                                }
                              }
                              rhs {
                                type: Literal
                                literal {
                                  type: Boolean
                                  boolValue: false
                                }
                              }
                            }
                          }
                        }
                        statement {
                          type: Expr
                          expr {
                            type: MethodCall
                            methodCall {
                              receiver {
                                type: FieldRef
                                fieldRef {
                                  enclosingType {
                                    pkg: "scala"
                                    name: "Predef$"
                                  }
                                  name: "MODULE$"
                                  tpe {
                                    type: Named
                                    namedType {
                                      pkg: "scala"
                                      name: "Predef$"
                                    }
                                  }
                                }
                              }
                              signature {
                                name: "println"
                                owner {
                                  pkg: "scala"
                                  name: "Predef$"
                                }
                                paramType {
                                  type: Named
                                  namedType {
                                    pkg: "java.lang"
                                    name: "Object"
                                  }
                                }
                                returnType {
                                  type: Void
                                }
                              }
                              argument {
                                type: Literal
                                literal {
                                  type: String
                                  stringValue: "empty list"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    elsee {
                      type: Block
                      block {
                      }
                    }
                  }
                }
                statement {
                  type: VarDef
                  varDef {
                    tpe {
                      type: Named
                      namedType {
                        pkg: "scala"
                        name: "Option"
                      }
                    }
                    name: "$1$"
                  }
                }
                statement {
                  type: If
                  ifStat {
                    condition {
                      type: VarRef
                      varRef {
                        name: "keepGoing6"
                      }
                    }
                    then {
                      type: Block
                      block {
                        statement {
                          type: VarDef
                          varDef {
                            tpe {
                              type: Named
                              namedType {
                                pkg: "scala"
                                name: "Option"
                              }
                            }
                            name: "$2$"
                          }
                        }
                        statement {
                          type: If
                          ifStat {
                            condition {
                              type: InstanceOf
                              instanceOf {
                                expr {
                                  type: VarRef
                                  varRef {
                                    name: "x1"
                                  }
                                }
                                tpe {
                                  type: Named
                                  namedType {
                                    pkg: "scala.collection.immutable"
                                    name: "$colon$colon"
                                  }
                                }
                              }
                            }
                            then {
                              type: Block
                              block {
                                statement {
                                  type: VarDef
                                  varDef {
                                    tpe {
                                      type: Named
                                      namedType {
                                        pkg: "scala.collection.immutable"
                                        name: "$colon$colon"
                                      }
                                    }
                                    name: "x3"
                                    initializer {
                                      type: Cast
                                      cast {
                                        expr {
                                          type: VarRef
                                          varRef {
                                            name: "x1"
                                          }
                                        }
                                        tpe {
                                          type: Named
                                          namedType {
                                            pkg: "scala.collection.immutable"
                                            name: "$colon$colon"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                statement {
                                  type: VarDef
                                  varDef {
                                    tpe {
                                      type: Named
                                      namedType {
                                        pkg: "scala"
                                        name: "Option"
                                      }
                                    }
                                    name: "$3$"
                                  }
                                }
                                statement {
                                  type: If
                                  ifStat {
                                    condition {
                                      type: Binary
                                      binary {
                                        op: NotEqual
                                        lhs {
                                          type: VarRef
                                          varRef {
                                            name: "x3"
                                          }
                                        }
                                        rhs {
                                          type: Literal
                                          literal {
                                            type: Null
                                          }
                                        }
                                        tpe {
                                          type: Primitive
                                          primitiveType: Boolean
                                        }
                                      }
                                    }
                                    then {
                                      type: Block
                                      block {
                                        statement {
                                          type: VarDef
                                          varDef {
                                            tpe {
                                              type: Named
                                              namedType {
                                                pkg: "scala"
                                                name: "Option"
                                              }
                                            }
                                            name: "$4$"
                                          }
                                        }
                                        statement {
                                          type: If
                                          ifStat {
                                            condition {
                                              type: MethodCall
                                              methodCall {
                                                signature {
                                                  name: "equals"
                                                  owner {
                                                    pkg: "scala.runtime"
                                                    name: "BoxesRunTime"
                                                  }
                                                  paramType {
                                                    type: Named
                                                    namedType {
                                                      pkg: "java.lang"
                                                      name: "Object"
                                                    }
                                                  }
                                                  paramType {
                                                    type: Named
                                                    namedType {
                                                      pkg: "java.lang"
                                                      name: "Object"
                                                    }
                                                  }
                                                  returnType {
                                                    type: Primitive
                                                    primitiveType: Boolean
                                                  }
                                                }
                                                argument {
                                                  type: FieldRef
                                                  fieldRef {
                                                    enclosingType {
                                                      pkg: "scala.collection.immutable"
                                                      name: "Nil$"
                                                    }
                                                    name: "MODULE$"
                                                    tpe {
                                                      type: Named
                                                      namedType {
                                                        pkg: "scala.collection.immutable"
                                                        name: "Nil$"
                                                      }
                                                    }
                                                  }
                                                }
                                                argument {
                                                  type: MethodCall
                                                  methodCall {
                                                    receiver {
                                                      type: VarRef
                                                      varRef {
                                                        name: "x3"
                                                      }
                                                    }
                                                    signature {
                                                      name: "tl$1"
                                                      owner {
                                                        pkg: "scala.collection.immutable"
                                                        name: "$colon$colon"
                                                      }
                                                      returnType {
                                                        type: Named
                                                        namedType {
                                                          pkg: "scala.collection.immutable"
                                                          name: "List"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            then {
                                              type: Block
                                              block {
                                                statement {
                                                  type: VarDef
                                                  varDef {
                                                    tpe {
                                                      type: Named
                                                      namedType {
                                                        pkg: "scala.collection.immutable"
                                                        name: "List"
                                                      }
                                                    }
                                                    name: "x5"
                                                    initializer {
                                                      type: MethodCall
                                                      methodCall {
                                                        receiver {
                                                          type: VarRef
                                                          varRef {
                                                            name: "x3"
                                                          }
                                                        }
                                                        signature {
                                                          name: "tl$1"
                                                          owner {
                                                            pkg: "scala.collection.immutable"
                                                            name: "$colon$colon"
                                                          }
                                                          returnType {
                                                            type: Named
                                                            namedType {
                                                              pkg: "scala.collection.immutable"
                                                              name: "List"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                statement {
                                                  type: Expr
                                                  expr {
                                                    type: Assignment
                                                    assignment {
                                                      lhs {
                                                        type: VarRef
                                                        varRef {
                                                          name: "keepGoing6"
                                                        }
                                                      }
                                                      rhs {
                                                        type: Literal
                                                        literal {
                                                          type: Boolean
                                                          boolValue: false
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                statement {
                                                  type: Expr
                                                  expr {
                                                    type: MethodCall
                                                    methodCall {
                                                      receiver {
                                                        type: FieldRef
                                                        fieldRef {
                                                          enclosingType {
                                                            pkg: "scala"
                                                            name: "Predef$"
                                                          }
                                                          name: "MODULE$"
                                                          tpe {
                                                            type: Named
                                                            namedType {
                                                              pkg: "scala"
                                                              name: "Predef$"
                                                            }
                                                          }
                                                        }
                                                      }
                                                      signature {
                                                        name: "println"
                                                        owner {
                                                          pkg: "scala"
                                                          name: "Predef$"
                                                        }
                                                        paramType {
                                                          type: Named
                                                          namedType {
                                                            pkg: "java.lang"
                                                            name: "Object"
                                                          }
                                                        }
                                                        returnType {
                                                          type: Void
                                                        }
                                                      }
                                                      argument {
                                                        type: Literal
                                                        literal {
                                                          type: String
                                                          stringValue: "singleton list"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                statement {
                                                  type: Expr
                                                  expr {
                                                    type: Assignment
                                                    assignment {
                                                      lhs {
                                                        type: VarRef
                                                        varRef {
                                                          name: "$4$"
                                                        }
                                                      }
                                                      rhs {
                                                        type: VarRef
                                                        varRef {
                                                          name: "zero7"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            elsee {
                                              type: Block
                                              block {
                                                statement {
                                                  type: Expr
                                                  expr {
                                                    type: Assignment
                                                    assignment {
                                                      lhs {
                                                        type: VarRef
                                                        varRef {
                                                          name: "$4$"
                                                        }
                                                      }
                                                      rhs {
                                                        type: VarRef
                                                        varRef {
                                                          name: "zero7"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        statement {
                                          type: Expr
                                          expr {
                                            type: Assignment
                                            assignment {
                                              lhs {
                                                type: VarRef
                                                varRef {
                                                  name: "$3$"
                                                }
                                              }
                                              rhs {
                                                type: VarRef
                                                varRef {
                                                  name: "$4$"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    elsee {
                                      type: Block
                                      block {
                                        statement {
                                          type: Expr
                                          expr {
                                            type: Assignment
                                            assignment {
                                              lhs {
                                                type: VarRef
                                                varRef {
                                                  name: "$3$"
                                                }
                                              }
                                              rhs {
                                                type: VarRef
                                                varRef {
                                                  name: "zero7"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                statement {
                                  type: Expr
                                  expr {
                                    type: Assignment
                                    assignment {
                                      lhs {
                                        type: VarRef
                                        varRef {
                                          name: "$2$"
                                        }
                                      }
                                      rhs {
                                        type: VarRef
                                        varRef {
                                          name: "$3$"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            elsee {
                              type: Block
                              block {
                                statement {
                                  type: Expr
                                  expr {
                                    type: Assignment
                                    assignment {
                                      lhs {
                                        type: VarRef
                                        varRef {
                                          name: "$2$"
                                        }
                                      }
                                      rhs {
                                        type: VarRef
                                        varRef {
                                          name: "zero7"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        statement {
                          type: Expr
                          expr {
                            type: Assignment
                            assignment {
                              lhs {
                                type: VarRef
                                varRef {
                                  name: "$1$"
                                }
                              }
                              rhs {
                                type: VarRef
                                varRef {
                                  name: "$2$"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    elsee {
                      type: Block
                      block {
                        statement {
                          type: Expr
                          expr {
                            type: Assignment
                            assignment {
                              lhs {
                                type: VarRef
                                varRef {
                                  name: "$1$"
                                }
                              }
                              rhs {
                                type: VarRef
                                varRef {
                                  name: "zero7"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            statement {
              type: VarDef
              varDef {
                tpe {
                  type: Named
                  namedType {
                    pkg: "scala"
                    name: "Option"
                  }
                }
                name: "$5$"
              }
            }
            statement {
              type: If
              ifStat {
                condition {
                  type: VarRef
                  varRef {
                    name: "keepGoing6"
                  }
                }
                then {
                  type: Block
                  block {
                    statement {
                      type: Expr
                      expr {
                        type: Assignment
                        assignment {
                          lhs {
                            type: VarRef
                            varRef {
                              name: "keepGoing6"
                            }
                          }
                          rhs {
                            type: Literal
                            literal {
                              type: Boolean
                              boolValue: false
                            }
                          }
                        }
                      }
                    }
                    statement {
                      type: Expr
                      expr {
                        type: MethodCall
                        methodCall {
                          receiver {
                            type: FieldRef
                            fieldRef {
                              enclosingType {
                                pkg: "scala"
                                name: "Predef$"
                              }
                              name: "MODULE$"
                              tpe {
                                type: Named
                                namedType {
                                  pkg: "scala"
                                  name: "Predef$"
                                }
                              }
                            }
                          }
                          signature {
                            name: "println"
                            owner {
                              pkg: "scala"
                              name: "Predef$"
                            }
                            paramType {
                              type: Named
                              namedType {
                                pkg: "java.lang"
                                name: "Object"
                              }
                            }
                            returnType {
                              type: Void
                            }
                          }
                          argument {
                            type: Literal
                            literal {
                              type: String
                              stringValue: "more than one element list"
                            }
                          }
                        }
                      }
                    }
                    statement {
                      type: Expr
                      expr {
                        type: Assignment
                        assignment {
                          lhs {
                            type: VarRef
                            varRef {
                              name: "$5$"
                            }
                          }
                          rhs {
                            type: VarRef
                            varRef {
                              name: "zero7"
                            }
                          }
                        }
                      }
                    }
                  }
                }
                elsee {
                  type: Block
                  block {
                    statement {
                      type: Expr
                      expr {
                        type: Assignment
                        assignment {
                          lhs {
                            type: VarRef
                            varRef {
                              name: "$5$"
                            }
                          }
                          rhs {
                            type: VarRef
                            varRef {
                              name: "zero7"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "shouldBeTranslatedToSwitch"
    paramDef {
      name: "x"
      tpe {
        type: Primitive
        primitiveType: Int
      }
    }
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "x1"
            initializer {
              type: VarRef
              varRef {
                name: "x"
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "$6$"
            initializer {
              type: VarRef
              varRef {
                name: "x1"
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "java.lang"
                name: "String"
              }
            }
            name: "$7$"
          }
        }
        statement {
          type: Switch
          switchStat {
            expression {
              type: VarRef
              varRef {
                name: "$6$"
              }
            }
            case {
              constant {
                type: Int
                intValue: 0
              }
              statement {
                type: Block
                block {
                  statement {
                    type: Expr
                    expr {
                      type: Assignment
                      assignment {
                        lhs {
                          type: VarRef
                          varRef {
                            name: "$7$"
                          }
                        }
                        rhs {
                          type: Literal
                          literal {
                            type: String
                            stringValue: "got zero"
                          }
                        }
                      }
                    }
                  }
                  statement {
                    type: Break
                    break {
                    }
                  }
                }
              }
            }
            case {
              constant {
                type: Int
                intValue: 1
              }
              statement {
                type: Block
                block {
                  statement {
                    type: Expr
                    expr {
                      type: Assignment
                      assignment {
                        lhs {
                          type: VarRef
                          varRef {
                            name: "$7$"
                          }
                        }
                        rhs {
                          type: Literal
                          literal {
                            type: String
                            stringValue: "got one or two"
                          }
                        }
                      }
                    }
                  }
                  statement {
                    type: Break
                    break {
                    }
                  }
                }
              }
            }
            case {
              constant {
                type: Int
                intValue: 2
              }
              statement {
                type: Block
                block {
                  statement {
                    type: Expr
                    expr {
                      type: Assignment
                      assignment {
                        lhs {
                          type: VarRef
                          varRef {
                            name: "$7$"
                          }
                        }
                        rhs {
                          type: Literal
                          literal {
                            type: String
                            stringValue: "got one or two"
                          }
                        }
                      }
                    }
                  }
                  statement {
                    type: Break
                    break {
                    }
                  }
                }
              }
            }
            defaultCase {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: Assignment
                    assignment {
                      lhs {
                        type: VarRef
                        varRef {
                          name: "$7$"
                        }
                      }
                      rhs {
                        type: Literal
                        literal {
                          type: String
                          stringValue: "got something else"
                        }
                      }
                    }
                  }
                }
                statement {
                  type: Break
                  break {
                  }
                }
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "java.lang"
                name: "String"
              }
            }
            name: "msg"
            initializer {
              type: VarRef
              varRef {
                name: "$7$"
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "unpackTuple"
    paramDef {
      name: "t"
      tpe {
        type: Named
        namedType {
          pkg: "scala"
          name: "Tuple2"
        }
      }
    }
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "scala"
                name: "Option"
              }
            }
            name: "zero4"
            initializer {
              type: FieldRef
              fieldRef {
                enclosingType {
                  pkg: "scala"
                  name: "None$"
                }
                name: "MODULE$"
                tpe {
                  type: Named
                  namedType {
                    pkg: "scala"
                    name: "None$"
                  }
                }
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "scala"
                name: "Tuple2"
              }
            }
            name: "x1"
            initializer {
              type: VarRef
              varRef {
                name: "t"
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "scala"
                name: "Tuple2"
              }
            }
            name: "matchRes3"
            initializer {
              type: Literal
              literal {
                type: Null
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Boolean
            }
            name: "keepGoing2"
            initializer {
              type: Literal
              literal {
                type: Boolean
                boolValue: true
              }
            }
          }
        }
        statement {
          type: If
          ifStat {
            condition {
              type: Binary
              binary {
                op: NotEqual
                lhs {
                  type: VarRef
                  varRef {
                    name: "x1"
                  }
                }
                rhs {
                  type: Literal
                  literal {
                    type: Null
                  }
                }
                tpe {
                  type: Primitive
                  primitiveType: Boolean
                }
              }
            }
            then {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: Assignment
                    assignment {
                      lhs {
                        type: VarRef
                        varRef {
                          name: "keepGoing2"
                        }
                      }
                      rhs {
                        type: Literal
                        literal {
                          type: Boolean
                          boolValue: false
                        }
                      }
                    }
                  }
                }
                statement {
                  type: Expr
                  expr {
                    type: Assignment
                    assignment {
                      lhs {
                        type: VarRef
                        varRef {
                          name: "matchRes3"
                        }
                      }
                      rhs {
                        type: NewObject
                        newObject {
                          clazz {
                            pkg: "scala"
                            name: "Tuple2$mcII$sp"
                          }
                          signature {
                            name: "new"
                            owner {
                              pkg: "scala"
                              name: "Tuple2$mcII$sp"
                            }
                            paramType {
                              type: Primitive
                              primitiveType: Int
                            }
                            paramType {
                              type: Primitive
                              primitiveType: Int
                            }
                            returnType {
                              type: Named
                              namedType {
                                pkg: "scala"
                                name: "Tuple2$mcII$sp"
                              }
                            }
                          }
                          argument {
                            type: MethodCall
                            methodCall {
                              receiver {
                                type: VarRef
                                varRef {
                                  name: "x1"
                                }
                              }
                              signature {
                                name: "_1$mcI$sp"
                                owner {
                                  pkg: "scala"
                                  name: "Tuple2"
                                }
                                returnType {
                                  type: Primitive
                                  primitiveType: Int
                                }
                              }
                            }
                          }
                          argument {
                            type: MethodCall
                            methodCall {
                              receiver {
                                type: VarRef
                                varRef {
                                  name: "x1"
                                }
                              }
                              signature {
                                name: "_2$mcI$sp"
                                owner {
                                  pkg: "scala"
                                  name: "Tuple2"
                                }
                                returnType {
                                  type: Primitive
                                  primitiveType: Int
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            elsee {
              type: Block
              block {
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "scala"
                name: "Tuple2"
              }
            }
            name: "$8$"
          }
        }
        statement {
          type: If
          ifStat {
            condition {
              type: VarRef
              varRef {
                name: "keepGoing2"
              }
            }
            then {
              type: Block
              block {
                statement {
                  type: Throw
                  throwStat {
                    expression {
                      type: NewObject
                      newObject {
                        clazz {
                          pkg: "scala"
                          name: "MatchError"
                        }
                        signature {
                          name: "new"
                          owner {
                            pkg: "scala"
                            name: "MatchError"
                          }
                          paramType {
                            type: Named
                            namedType {
                              pkg: "java.lang"
                              name: "Object"
                            }
                          }
                          returnType {
                            type: Named
                            namedType {
                              pkg: "scala"
                              name: "MatchError"
                            }
                          }
                        }
                        argument {
                          type: VarRef
                          varRef {
                            name: "x1"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            elsee {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: Assignment
                    assignment {
                      lhs {
                        type: VarRef
                        varRef {
                          name: "$8$"
                        }
                      }
                      rhs {
                        type: VarRef
                        varRef {
                          name: "matchRes3"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "scala"
                name: "Tuple2"
              }
            }
            name: "x$1"
            initializer {
              type: VarRef
              varRef {
                name: "$8$"
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "x"
            initializer {
              type: MethodCall
              methodCall {
                receiver {
                  type: VarRef
                  varRef {
                    name: "x$1"
                  }
                }
                signature {
                  name: "_1$mcI$sp"
                  owner {
                    pkg: "scala"
                    name: "Tuple2"
                  }
                  returnType {
                    type: Primitive
                    primitiveType: Int
                  }
                }
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "y"
            initializer {
              type: MethodCall
              methodCall {
                receiver {
                  type: VarRef
                  varRef {
                    name: "x$1"
                  }
                }
                signature {
                  name: "_2$mcI$sp"
                  owner {
                    pkg: "scala"
                    name: "Tuple2"
                  }
                  returnType {
                    type: Primitive
                    primitiveType: Int
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "throwInPatternBranch"
    paramDef {
      name: "x"
      tpe {
        type: Primitive
        primitiveType: Int
      }
    }
    returnType {
      type: Primitive
      primitiveType: Int
    }
    body {
      type: Block
      block {
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "scala"
                name: "Option"
              }
            }
            name: "zero4"
            initializer {
              type: FieldRef
              fieldRef {
                enclosingType {
                  pkg: "scala"
                  name: "None$"
                }
                name: "MODULE$"
                tpe {
                  type: Named
                  namedType {
                    pkg: "scala"
                    name: "None$"
                  }
                }
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "x1"
            initializer {
              type: VarRef
              varRef {
                name: "x"
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "matchRes3"
            initializer {
              type: Literal
              literal {
                type: Int
                intValue: 0
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Boolean
            }
            name: "keepGoing2"
            initializer {
              type: Literal
              literal {
                type: Boolean
                boolValue: true
              }
            }
          }
        }
        statement {
          type: Block
          block {
            statement {
              type: If
              ifStat {
                condition {
                  type: Binary
                  binary {
                    op: Equal
                    lhs {
                      type: VarRef
                      varRef {
                        name: "x1"
                      }
                    }
                    rhs {
                      type: Literal
                      literal {
                        type: Int
                        intValue: 0
                      }
                    }
                    tpe {
                      type: Primitive
                      primitiveType: Boolean
                    }
                  }
                }
                then {
                  type: Block
                  block {
                    statement {
                      type: Expr
                      expr {
                        type: Assignment
                        assignment {
                          lhs {
                            type: VarRef
                            varRef {
                              name: "keepGoing2"
                            }
                          }
                          rhs {
                            type: Literal
                            literal {
                              type: Boolean
                              boolValue: false
                            }
                          }
                        }
                      }
                    }
                    statement {
                      type: Block
                      block {
                        statement {
                          type: Throw
                          throwStat {
                            expression {
                              type: NewObject
                              newObject {
                                clazz {
                                  pkg: "java.lang"
                                  name: "RuntimeException"
                                }
                                signature {
                                  name: "new"
                                  owner {
                                    pkg: "java.lang"
                                    name: "RuntimeException"
                                  }
                                  paramType {
                                    type: Named
                                    namedType {
                                      pkg: "java.lang"
                                      name: "String"
                                    }
                                  }
                                  returnType {
                                    type: Named
                                    namedType {
                                      pkg: "java.lang"
                                      name: "RuntimeException"
                                    }
                                  }
                                }
                                argument {
                                  type: Literal
                                  literal {
                                    type: String
                                    stringValue: "don\'t like zeros"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                elsee {
                  type: Block
                  block {
                  }
                }
              }
            }
            statement {
              type: VarDef
              varDef {
                tpe {
                  type: Named
                  namedType {
                    pkg: "scala"
                    name: "Option"
                  }
                }
                name: "$9$"
              }
            }
            statement {
              type: If
              ifStat {
                condition {
                  type: VarRef
                  varRef {
                    name: "keepGoing2"
                  }
                }
                then {
                  type: Block
                  block {
                    statement {
                      type: Expr
                      expr {
                        type: Assignment
                        assignment {
                          lhs {
                            type: VarRef
                            varRef {
                              name: "keepGoing2"
                            }
                          }
                          rhs {
                            type: Literal
                            literal {
                              type: Boolean
                              boolValue: false
                            }
                          }
                        }
                      }
                    }
                    statement {
                      type: Expr
                      expr {
                        type: Assignment
                        assignment {
                          lhs {
                            type: VarRef
                            varRef {
                              name: "matchRes3"
                            }
                          }
                          rhs {
                            type: VarRef
                            varRef {
                              name: "x1"
                            }
                          }
                        }
                      }
                    }
                    statement {
                      type: Expr
                      expr {
                        type: Assignment
                        assignment {
                          lhs {
                            type: VarRef
                            varRef {
                              name: "$9$"
                            }
                          }
                          rhs {
                            type: VarRef
                            varRef {
                              name: "zero4"
                            }
                          }
                        }
                      }
                    }
                  }
                }
                elsee {
                  type: Block
                  block {
                    statement {
                      type: Expr
                      expr {
                        type: Assignment
                        assignment {
                          lhs {
                            type: VarRef
                            varRef {
                              name: "$9$"
                            }
                          }
                          rhs {
                            type: VarRef
                            varRef {
                              name: "zero4"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statement {
          type: Return
          returnStat {
            expression {
              type: VarRef
              varRef {
                name: "matchRes3"
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    isConstructor: true
    name: "new"
    returnType {
      type: Named
      namedType {
        name: "PatternMatching"
      }
    }
    body {
      type: Block
      block {
        statement {
          type: Expr
          expr {
            type: MethodCall
            methodCall {
              receiver {
                type: ThisRef
              }
              signature {
                name: "new"
                owner {
                  pkg: "java.lang"
                  name: "Object"
                }
                returnType {
                  type: Named
                  namedType {
                    pkg: "java.lang"
                    name: "Object"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
