name {
  name: "CaseClass"
}
modifiers {
  isPublic: true
}
ext {
  pkg: "java.lang"
  name: "Object"
}
implements {
  pkg: "scala"
  name: "ScalaObject"
}
implements {
  pkg: "scala"
  name: "Product"
}
implements {
  pkg: "scala"
  name: "Serializable"
}
member {
  type: Field
  modifiers {
    isPrivate: true
  }
  fieldDef {
    tpe {
      type: Primitive
      primitiveType: Int
    }
    name: "x$u0020"
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "x"
    returnType {
      type: Primitive
      primitiveType: Int
    }
    body {
      type: Block
      block {
        statement {
          type: Return
          returnStat {
            expression {
              type: FieldRef
              fieldRef {
                qualifier {
                  type: ThisRef
                }
                enclosingType {
                  name: "CaseClass"
                }
                name: "x$u0020"
                tpe {
                  type: Primitive
                  primitiveType: Int
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "copy"
    paramDef {
      name: "x"
      tpe {
        type: Primitive
        primitiveType: Int
      }
    }
    returnType {
      type: Named
      namedType {
        name: "CaseClass"
      }
    }
    body {
      type: Block
      block {
        statement {
          type: Return
          returnStat {
            expression {
              type: NewObject
              newObject {
                clazz {
                  name: "CaseClass"
                }
                signature {
                  name: "new"
                  owner {
                    name: "CaseClass"
                  }
                  paramType {
                    type: Primitive
                    primitiveType: Int
                  }
                  returnType {
                    type: Named
                    namedType {
                      name: "CaseClass"
                    }
                  }
                }
                argument {
                  type: VarRef
                  varRef {
                    name: "x"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "copy$default$1"
    returnType {
      type: Primitive
      primitiveType: Int
    }
    body {
      type: Block
      block {
        statement {
          type: Return
          returnStat {
            expression {
              type: MethodCall
              methodCall {
                receiver {
                  type: ThisRef
                }
                signature {
                  name: "x"
                  owner {
                    name: "CaseClass"
                  }
                  returnType {
                    type: Primitive
                    primitiveType: Int
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "productPrefix"
    returnType {
      type: Named
      namedType {
        pkg: "java.lang"
        name: "String"
      }
    }
    body {
      type: Block
      block {
        statement {
          type: Return
          returnStat {
            expression {
              type: Literal
              literal {
                type: String
                stringValue: "CaseClass"
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "productArity"
    returnType {
      type: Primitive
      primitiveType: Int
    }
    body {
      type: Block
      block {
        statement {
          type: Return
          returnStat {
            expression {
              type: Literal
              literal {
                type: Int
                intValue: 1
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "productElement"
    paramDef {
      name: "x$1"
      tpe {
        type: Primitive
        primitiveType: Int
      }
    }
    returnType {
      type: Named
      namedType {
        pkg: "java.lang"
        name: "Object"
      }
    }
    body {
      type: Block
      block {
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "temp1"
            initializer {
              type: VarRef
              varRef {
                name: "x$1"
              }
            }
          }
        }
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "java.lang"
                name: "Object"
              }
            }
            name: "$1$"
          }
        }
        statement {
          type: If
          ifStat {
            condition {
              type: Binary
              binary {
                op: Equal
                lhs {
                  type: VarRef
                  varRef {
                    name: "temp1"
                  }
                }
                rhs {
                  type: Literal
                  literal {
                    type: Int
                    intValue: 0
                  }
                }
                tpe {
                  type: Primitive
                  primitiveType: Boolean
                }
              }
            }
            then {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: Assignment
                    assignment {
                      lhs {
                        type: VarRef
                        varRef {
                          name: "$1$"
                        }
                      }
                      rhs {
                        type: MethodCall
                        methodCall {
                          signature {
                            name: "boxToInteger"
                            owner {
                              pkg: "scala.runtime"
                              name: "BoxesRunTime"
                            }
                            paramType {
                              type: Primitive
                              primitiveType: Int
                            }
                            returnType {
                              type: Named
                              namedType {
                                pkg: "java.lang"
                                name: "Integer"
                              }
                            }
                          }
                          argument {
                            type: MethodCall
                            methodCall {
                              receiver {
                                type: ThisRef
                              }
                              signature {
                                name: "x"
                                owner {
                                  name: "CaseClass"
                                }
                                returnType {
                                  type: Primitive
                                  primitiveType: Int
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            elsee {
              type: Block
              block {
                statement {
                  type: Throw
                  throwStat {
                    expression {
                      type: NewObject
                      newObject {
                        clazz {
                          pkg: "java.lang"
                          name: "IndexOutOfBoundsException"
                        }
                        signature {
                          name: "new"
                          owner {
                            pkg: "java.lang"
                            name: "IndexOutOfBoundsException"
                          }
                          paramType {
                            type: Named
                            namedType {
                              pkg: "java.lang"
                              name: "String"
                            }
                          }
                          returnType {
                            type: Named
                            namedType {
                              pkg: "java.lang"
                              name: "IndexOutOfBoundsException"
                            }
                          }
                        }
                        argument {
                          type: MethodCall
                          methodCall {
                            receiver {
                              type: MethodCall
                              methodCall {
                                signature {
                                  name: "boxToInteger"
                                  owner {
                                    pkg: "scala.runtime"
                                    name: "BoxesRunTime"
                                  }
                                  paramType {
                                    type: Primitive
                                    primitiveType: Int
                                  }
                                  returnType {
                                    type: Named
                                    namedType {
                                      pkg: "java.lang"
                                      name: "Integer"
                                    }
                                  }
                                }
                                argument {
                                  type: VarRef
                                  varRef {
                                    name: "x$1"
                                  }
                                }
                              }
                            }
                            signature {
                              name: "toString"
                              owner {
                                pkg: "java.lang"
                                name: "Object"
                              }
                              returnType {
                                type: Named
                                namedType {
                                  pkg: "java.lang"
                                  name: "String"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statement {
          type: Return
          returnStat {
            expression {
              type: VarRef
              varRef {
                name: "$1$"
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "productIterator"
    returnType {
      type: Named
      namedType {
        pkg: "scala.collection"
        name: "Iterator"
      }
    }
    body {
      type: Block
      block {
        statement {
          type: Return
          returnStat {
            expression {
              type: MethodCall
              methodCall {
                receiver {
                  type: FieldRef
                  fieldRef {
                    enclosingType {
                      pkg: "scala.runtime"
                      name: "ScalaRunTime$"
                    }
                    name: "MODULE$"
                    tpe {
                      type: Named
                      namedType {
                        pkg: "scala.runtime"
                        name: "ScalaRunTime$"
                      }
                    }
                  }
                }
                signature {
                  name: "typedProductIterator"
                  owner {
                    pkg: "scala.runtime"
                    name: "ScalaRunTime$"
                  }
                  paramType {
                    type: Named
                    namedType {
                      pkg: "scala"
                      name: "Product"
                    }
                  }
                  returnType {
                    type: Named
                    namedType {
                      pkg: "scala.collection"
                      name: "Iterator"
                    }
                  }
                }
                argument {
                  type: ThisRef
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "canEqual"
    paramDef {
      name: "x$1"
      tpe {
        type: Named
        namedType {
          pkg: "java.lang"
          name: "Object"
        }
      }
    }
    returnType {
      type: Primitive
      primitiveType: Boolean
    }
    body {
      type: Block
      block {
        statement {
          type: Return
          returnStat {
            expression {
              type: InstanceOf
              instanceOf {
                expr {
                  type: VarRef
                  varRef {
                    name: "x$1"
                  }
                }
                tpe {
                  type: Named
                  namedType {
                    name: "CaseClass"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "_1"
    returnType {
      type: Primitive
      primitiveType: Int
    }
    body {
      type: Block
      block {
        statement {
          type: Return
          returnStat {
            expression {
              type: MethodCall
              methodCall {
                receiver {
                  type: ThisRef
                }
                signature {
                  name: "x"
                  owner {
                    name: "CaseClass"
                  }
                  returnType {
                    type: Primitive
                    primitiveType: Int
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "hashCode"
    returnType {
      type: Primitive
      primitiveType: Int
    }
    body {
      type: Block
      block {
        statement {
          type: Return
          returnStat {
            expression {
              type: MethodCall
              methodCall {
                receiver {
                  type: FieldRef
                  fieldRef {
                    enclosingType {
                      pkg: "scala.runtime"
                      name: "ScalaRunTime$"
                    }
                    name: "MODULE$"
                    tpe {
                      type: Named
                      namedType {
                        pkg: "scala.runtime"
                        name: "ScalaRunTime$"
                      }
                    }
                  }
                }
                signature {
                  name: "_hashCode"
                  owner {
                    pkg: "scala.runtime"
                    name: "ScalaRunTime$"
                  }
                  paramType {
                    type: Named
                    namedType {
                      pkg: "scala"
                      name: "Product"
                    }
                  }
                  returnType {
                    type: Primitive
                    primitiveType: Int
                  }
                }
                argument {
                  type: ThisRef
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "toString"
    returnType {
      type: Named
      namedType {
        pkg: "java.lang"
        name: "String"
      }
    }
    body {
      type: Block
      block {
        statement {
          type: Return
          returnStat {
            expression {
              type: MethodCall
              methodCall {
                receiver {
                  type: FieldRef
                  fieldRef {
                    enclosingType {
                      pkg: "scala.runtime"
                      name: "ScalaRunTime$"
                    }
                    name: "MODULE$"
                    tpe {
                      type: Named
                      namedType {
                        pkg: "scala.runtime"
                        name: "ScalaRunTime$"
                      }
                    }
                  }
                }
                signature {
                  name: "_toString"
                  owner {
                    pkg: "scala.runtime"
                    name: "ScalaRunTime$"
                  }
                  paramType {
                    type: Named
                    namedType {
                      pkg: "scala"
                      name: "Product"
                    }
                  }
                  returnType {
                    type: Named
                    namedType {
                      pkg: "java.lang"
                      name: "String"
                    }
                  }
                }
                argument {
                  type: ThisRef
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "equals"
    paramDef {
      name: "x$1"
      tpe {
        type: Named
        namedType {
          pkg: "java.lang"
          name: "Object"
        }
      }
    }
    returnType {
      type: Primitive
      primitiveType: Boolean
    }
    body {
      type: Block
      block {
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Boolean
            }
            name: "$3$"
          }
        }
        statement {
          type: If
          ifStat {
            condition {
              type: Binary
              binary {
                op: Equal
                lhs {
                  type: ThisRef
                }
                rhs {
                  type: VarRef
                  varRef {
                    name: "x$1"
                  }
                }
                tpe {
                  type: Primitive
                  primitiveType: Boolean
                }
              }
            }
            then {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: Assignment
                    assignment {
                      lhs {
                        type: VarRef
                        varRef {
                          name: "$3$"
                        }
                      }
                      rhs {
                        type: Literal
                        literal {
                          type: Boolean
                          boolValue: true
                        }
                      }
                    }
                  }
                }
              }
            }
            elsee {
              type: Block
              block {
                statement {
                  type: VarDef
                  varDef {
                    tpe {
                      type: Primitive
                      primitiveType: Boolean
                    }
                    name: "$4$"
                  }
                }
                statement {
                  type: If
                  ifStat {
                    condition {
                      type: InstanceOf
                      instanceOf {
                        expr {
                          type: VarRef
                          varRef {
                            name: "x$1"
                          }
                        }
                        tpe {
                          type: Named
                          namedType {
                            name: "CaseClass"
                          }
                        }
                      }
                    }
                    then {
                      type: Block
                      block {
                        statement {
                          type: VarDef
                          varDef {
                            tpe {
                              type: Named
                              namedType {
                                name: "CaseClass"
                              }
                            }
                            name: "CaseClass$1"
                            initializer {
                              type: Cast
                              cast {
                                expr {
                                  type: VarRef
                                  varRef {
                                    name: "x$1"
                                  }
                                }
                                tpe {
                                  type: Named
                                  namedType {
                                    name: "CaseClass"
                                  }
                                }
                              }
                            }
                          }
                        }
                        statement {
                          type: Expr
                          expr {
                            type: Assignment
                            assignment {
                              lhs {
                                type: VarRef
                                varRef {
                                  name: "$4$"
                                }
                              }
                              rhs {
                                type: Binary
                                binary {
                                  op: And
                                  lhs {
                                    type: Binary
                                    binary {
                                      op: Equal
                                      lhs {
                                        type: MethodCall
                                        methodCall {
                                          receiver {
                                            type: ThisRef
                                          }
                                          signature {
                                            name: "x"
                                            owner {
                                              name: "CaseClass"
                                            }
                                            returnType {
                                              type: Primitive
                                              primitiveType: Int
                                            }
                                          }
                                        }
                                      }
                                      rhs {
                                        type: MethodCall
                                        methodCall {
                                          receiver {
                                            type: VarRef
                                            varRef {
                                              name: "CaseClass$1"
                                            }
                                          }
                                          signature {
                                            name: "x"
                                            owner {
                                              name: "CaseClass"
                                            }
                                            returnType {
                                              type: Primitive
                                              primitiveType: Int
                                            }
                                          }
                                        }
                                      }
                                      tpe {
                                        type: Primitive
                                        primitiveType: Boolean
                                      }
                                    }
                                  }
                                  rhs {
                                    type: MethodCall
                                    methodCall {
                                      receiver {
                                        type: VarRef
                                        varRef {
                                          name: "CaseClass$1"
                                        }
                                      }
                                      signature {
                                        name: "canEqual"
                                        owner {
                                          name: "CaseClass"
                                        }
                                        paramType {
                                          type: Named
                                          namedType {
                                            pkg: "java.lang"
                                            name: "Object"
                                          }
                                        }
                                        returnType {
                                          type: Primitive
                                          primitiveType: Boolean
                                        }
                                      }
                                      argument {
                                        type: ThisRef
                                      }
                                    }
                                  }
                                  tpe {
                                    type: Primitive
                                    primitiveType: Boolean
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    elsee {
                      type: Block
                      block {
                        statement {
                          type: Expr
                          expr {
                            type: Assignment
                            assignment {
                              lhs {
                                type: VarRef
                                varRef {
                                  name: "$4$"
                                }
                              }
                              rhs {
                                type: Literal
                                literal {
                                  type: Boolean
                                  boolValue: false
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                statement {
                  type: Expr
                  expr {
                    type: Assignment
                    assignment {
                      lhs {
                        type: VarRef
                        varRef {
                          name: "$3$"
                        }
                      }
                      rhs {
                        type: VarRef
                        varRef {
                          name: "$4$"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statement {
          type: Return
          returnStat {
            expression {
              type: VarRef
              varRef {
                name: "$3$"
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    isConstructor: true
    name: "new"
    paramDef {
      name: "x"
      tpe {
        type: Primitive
        primitiveType: Int
      }
    }
    returnType {
      type: Named
      namedType {
        name: "CaseClass"
      }
    }
    body {
      type: Block
      block {
        statement {
          type: Expr
          expr {
            type: Assignment
            assignment {
              lhs {
                type: FieldRef
                fieldRef {
                  qualifier {
                    type: ThisRef
                  }
                  enclosingType {
                    name: "CaseClass"
                  }
                  name: "x$u0020"
                  tpe {
                    type: Primitive
                    primitiveType: Int
                  }
                }
              }
              rhs {
                type: VarRef
                varRef {
                  name: "x"
                }
              }
            }
          }
        }
        statement {
          type: Expr
          expr {
            type: MethodCall
            methodCall {
              receiver {
                type: ThisRef
              }
              signature {
                name: "new"
                owner {
                  pkg: "java.lang"
                  name: "Object"
                }
                returnType {
                  type: Named
                  namedType {
                    pkg: "java.lang"
                    name: "Object"
                  }
                }
              }
            }
          }
        }
        statement {
          type: Expr
          expr {
            type: MethodCall
            methodCall {
              receiver {
                type: ThisRef
              }
              signature {
                name: "$init$"
                owner {
                  pkg: "scala"
                  name: "Product$class"
                }
                paramType {
                  type: Named
                  namedType {
                    pkg: "scala"
                    name: "Product"
                  }
                }
                returnType {
                  type: Void
                }
              }
              argument {
                type: ThisRef
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
    isFinal: true
    isStatic: true
  }
  method {
    name: "andThen"
    paramDef {
      name: "x_0"
      tpe {
        type: Named
        namedType {
          pkg: "scala"
          name: "Function1"
        }
      }
    }
    returnType {
      type: Named
      namedType {
        pkg: "scala"
        name: "Function1"
      }
    }
    body {
      type: Return
      returnStat {
        expression {
          type: MethodCall
          methodCall {
            receiver {
              type: FieldRef
              fieldRef {
                enclosingType {
                  name: "CaseClass$"
                }
                name: "MODULE$"
                tpe {
                  type: Named
                  namedType {
                    name: "CaseClass$"
                  }
                }
              }
            }
            signature {
              name: "andThen"
              owner {
                pkg: "scala.runtime"
                name: "AbstractFunction1"
              }
              paramType {
                type: Named
                namedType {
                  pkg: "scala"
                  name: "Function1"
                }
              }
              returnType {
                type: Named
                namedType {
                  pkg: "scala"
                  name: "Function1"
                }
              }
            }
            argument {
              type: VarRef
              varRef {
                name: "x_0"
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
    isFinal: true
    isStatic: true
  }
  method {
    name: "compose"
    paramDef {
      name: "x_0"
      tpe {
        type: Named
        namedType {
          pkg: "scala"
          name: "Function1"
        }
      }
    }
    returnType {
      type: Named
      namedType {
        pkg: "scala"
        name: "Function1"
      }
    }
    body {
      type: Return
      returnStat {
        expression {
          type: MethodCall
          methodCall {
            receiver {
              type: FieldRef
              fieldRef {
                enclosingType {
                  name: "CaseClass$"
                }
                name: "MODULE$"
                tpe {
                  type: Named
                  namedType {
                    name: "CaseClass$"
                  }
                }
              }
            }
            signature {
              name: "compose"
              owner {
                pkg: "scala.runtime"
                name: "AbstractFunction1"
              }
              paramType {
                type: Named
                namedType {
                  pkg: "scala"
                  name: "Function1"
                }
              }
              returnType {
                type: Named
                namedType {
                  pkg: "scala"
                  name: "Function1"
                }
              }
            }
            argument {
              type: VarRef
              varRef {
                name: "x_0"
              }
            }
          }
        }
      }
    }
  }
}
