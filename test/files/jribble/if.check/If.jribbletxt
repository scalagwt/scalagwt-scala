name {
  name: "If"
}
modifiers {
  isPublic: true
}
ext {
  pkg: "java.lang"
  name: "Object"
}
implements {
  pkg: "scala"
  name: "ScalaObject"
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "cond"
    returnType {
      type: Primitive
      primitiveType: Boolean
    }
    body {
      type: Block
      block {
        statement {
          type: Return
          returnStat {
            expression {
              type: Literal
              literal {
                type: Boolean
                boolValue: true
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "ifWithUnboxedUnitType"
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: If
          ifStat {
            condition {
              type: MethodCall
              methodCall {
                receiver {
                  type: ThisRef
                }
                signature {
                  name: "cond"
                  owner {
                    name: "If"
                  }
                  returnType {
                    type: Primitive
                    primitiveType: Boolean
                  }
                }
              }
            }
            then {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: MethodCall
                    methodCall {
                      receiver {
                        type: FieldRef
                        fieldRef {
                          enclosingType {
                            pkg: "scala"
                            name: "Predef$"
                          }
                          name: "MODULE$"
                        }
                      }
                      signature {
                        name: "println"
                        owner {
                          pkg: "scala"
                          name: "Predef$"
                        }
                        paramType {
                          type: Named
                          namedType {
                            pkg: "java.lang"
                            name: "Object"
                          }
                        }
                        returnType {
                          type: Void
                        }
                      }
                      argument {
                        type: Literal
                        literal {
                          type: String
                          stringValue: "Hello, world!"
                        }
                      }
                    }
                  }
                }
              }
            }
            elsee {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: MethodCall
                    methodCall {
                      receiver {
                        type: FieldRef
                        fieldRef {
                          enclosingType {
                            pkg: "scala"
                            name: "Predef$"
                          }
                          name: "MODULE$"
                        }
                      }
                      signature {
                        name: "println"
                        owner {
                          pkg: "scala"
                          name: "Predef$"
                        }
                        paramType {
                          type: Named
                          namedType {
                            pkg: "java.lang"
                            name: "Object"
                          }
                        }
                        returnType {
                          type: Void
                        }
                      }
                      argument {
                        type: Literal
                        literal {
                          type: String
                          stringValue: "Hello odd world!"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "ifWithNothingType"
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Named
              namedType {
                pkg: "scala.runtime"
                name: "Nothing$"
              }
            }
            name: "$1$"
          }
        }
        statement {
          type: If
          ifStat {
            condition {
              type: MethodCall
              methodCall {
                receiver {
                  type: ThisRef
                }
                signature {
                  name: "cond"
                  owner {
                    name: "If"
                  }
                  returnType {
                    type: Primitive
                    primitiveType: Boolean
                  }
                }
              }
            }
            then {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: MethodCall
                    methodCall {
                      receiver {
                        type: FieldRef
                        fieldRef {
                          enclosingType {
                            pkg: "scala"
                            name: "Predef$"
                          }
                          name: "MODULE$"
                        }
                      }
                      signature {
                        name: "error"
                        owner {
                          pkg: "scala"
                          name: "Predef$"
                        }
                        paramType {
                          type: Named
                          namedType {
                            pkg: "java.lang"
                            name: "String"
                          }
                        }
                        returnType {
                          type: Named
                          namedType {
                            pkg: "scala.runtime"
                            name: "Nothing$"
                          }
                        }
                      }
                      argument {
                        type: Literal
                        literal {
                          type: String
                          stringValue: "Hello, world!"
                        }
                      }
                    }
                  }
                }
              }
            }
            elsee {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: MethodCall
                    methodCall {
                      receiver {
                        type: FieldRef
                        fieldRef {
                          enclosingType {
                            pkg: "scala"
                            name: "Predef$"
                          }
                          name: "MODULE$"
                        }
                      }
                      signature {
                        name: "error"
                        owner {
                          pkg: "scala"
                          name: "Predef$"
                        }
                        paramType {
                          type: Named
                          namedType {
                            pkg: "java.lang"
                            name: "String"
                          }
                        }
                        returnType {
                          type: Named
                          namedType {
                            pkg: "scala.runtime"
                            name: "Nothing$"
                          }
                        }
                      }
                      argument {
                        type: Literal
                        literal {
                          type: String
                          stringValue: "Hello odd world!"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "ifWithStatmentsButReturningValue"
    returnType {
      type: Primitive
      primitiveType: Int
    }
    body {
      type: Block
      block {
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "$2$"
          }
        }
        statement {
          type: If
          ifStat {
            condition {
              type: MethodCall
              methodCall {
                receiver {
                  type: ThisRef
                }
                signature {
                  name: "cond"
                  owner {
                    name: "If"
                  }
                  returnType {
                    type: Primitive
                    primitiveType: Boolean
                  }
                }
              }
            }
            then {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: MethodCall
                    methodCall {
                      receiver {
                        type: ThisRef
                      }
                      signature {
                        name: "cond"
                        owner {
                          name: "If"
                        }
                        returnType {
                          type: Primitive
                          primitiveType: Boolean
                        }
                      }
                    }
                  }
                }
                statement {
                  type: Expr
                  expr {
                    type: Assignment
                    assignment {
                      lhs {
                        type: VarRef
                        varRef {
                          name: "$2$"
                        }
                      }
                      rhs {
                        type: Literal
                        literal {
                          type: Int
                          intValue: 0
                        }
                      }
                    }
                  }
                }
              }
            }
            elsee {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: MethodCall
                    methodCall {
                      receiver {
                        type: ThisRef
                      }
                      signature {
                        name: "cond"
                        owner {
                          name: "If"
                        }
                        returnType {
                          type: Primitive
                          primitiveType: Boolean
                        }
                      }
                    }
                  }
                }
                statement {
                  type: Expr
                  expr {
                    type: Assignment
                    assignment {
                      lhs {
                        type: VarRef
                        varRef {
                          name: "$2$"
                        }
                      }
                      rhs {
                        type: Literal
                        literal {
                          type: Int
                          intValue: 1
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statement {
          type: Return
          returnStat {
            expression {
              type: VarRef
              varRef {
                name: "$2$"
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "ifWithoutElseAsStmt"
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: If
          ifStat {
            condition {
              type: MethodCall
              methodCall {
                receiver {
                  type: ThisRef
                }
                signature {
                  name: "cond"
                  owner {
                    name: "If"
                  }
                  returnType {
                    type: Primitive
                    primitiveType: Boolean
                  }
                }
              }
            }
            then {
              type: Block
              block {
              }
            }
            elsee {
              type: Block
              block {
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "sideeffect"
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    name: "deeplyNestedIf"
    returnType {
      type: Void
    }
    body {
      type: Block
      block {
        statement {
          type: VarDef
          varDef {
            tpe {
              type: Primitive
              primitiveType: Int
            }
            name: "x"
            initializer {
              type: Literal
              literal {
                type: Int
                intValue: 0
              }
            }
          }
        }
        statement {
          type: If
          ifStat {
            condition {
              type: Binary
              binary {
                op: Equal
                lhs {
                  type: VarRef
                  varRef {
                    name: "x"
                  }
                }
                rhs {
                  type: Literal
                  literal {
                    type: Int
                    intValue: 0
                  }
                }
                tpe {
                  type: Primitive
                  primitiveType: Boolean
                }
              }
            }
            then {
              type: Block
              block {
                statement {
                  type: Expr
                  expr {
                    type: MethodCall
                    methodCall {
                      receiver {
                        type: ThisRef
                      }
                      signature {
                        name: "sideeffect"
                        owner {
                          name: "If"
                        }
                        returnType {
                          type: Void
                        }
                      }
                    }
                  }
                }
              }
            }
            elsee {
              type: Block
              block {
                statement {
                  type: If
                  ifStat {
                    condition {
                      type: Binary
                      binary {
                        op: Equal
                        lhs {
                          type: VarRef
                          varRef {
                            name: "x"
                          }
                        }
                        rhs {
                          type: Literal
                          literal {
                            type: Int
                            intValue: 1
                          }
                        }
                        tpe {
                          type: Primitive
                          primitiveType: Boolean
                        }
                      }
                    }
                    then {
                      type: Block
                      block {
                        statement {
                          type: Expr
                          expr {
                            type: MethodCall
                            methodCall {
                              receiver {
                                type: ThisRef
                              }
                              signature {
                                name: "sideeffect"
                                owner {
                                  name: "If"
                                }
                                returnType {
                                  type: Void
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    elsee {
                      type: Block
                      block {
                        statement {
                          type: If
                          ifStat {
                            condition {
                              type: Binary
                              binary {
                                op: Equal
                                lhs {
                                  type: VarRef
                                  varRef {
                                    name: "x"
                                  }
                                }
                                rhs {
                                  type: Literal
                                  literal {
                                    type: Int
                                    intValue: 2
                                  }
                                }
                                tpe {
                                  type: Primitive
                                  primitiveType: Boolean
                                }
                              }
                            }
                            then {
                              type: Block
                              block {
                                statement {
                                  type: Expr
                                  expr {
                                    type: MethodCall
                                    methodCall {
                                      receiver {
                                        type: ThisRef
                                      }
                                      signature {
                                        name: "sideeffect"
                                        owner {
                                          name: "If"
                                        }
                                        returnType {
                                          type: Void
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            elsee {
                              type: Block
                              block {
                                statement {
                                  type: If
                                  ifStat {
                                    condition {
                                      type: Binary
                                      binary {
                                        op: Equal
                                        lhs {
                                          type: VarRef
                                          varRef {
                                            name: "x"
                                          }
                                        }
                                        rhs {
                                          type: Literal
                                          literal {
                                            type: Int
                                            intValue: 3
                                          }
                                        }
                                        tpe {
                                          type: Primitive
                                          primitiveType: Boolean
                                        }
                                      }
                                    }
                                    then {
                                      type: Block
                                      block {
                                        statement {
                                          type: Expr
                                          expr {
                                            type: MethodCall
                                            methodCall {
                                              receiver {
                                                type: ThisRef
                                              }
                                              signature {
                                                name: "sideeffect"
                                                owner {
                                                  name: "If"
                                                }
                                                returnType {
                                                  type: Void
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    elsee {
                                      type: Block
                                      block {
                                        statement {
                                          type: If
                                          ifStat {
                                            condition {
                                              type: Binary
                                              binary {
                                                op: Equal
                                                lhs {
                                                  type: VarRef
                                                  varRef {
                                                    name: "x"
                                                  }
                                                }
                                                rhs {
                                                  type: Literal
                                                  literal {
                                                    type: Int
                                                    intValue: 4
                                                  }
                                                }
                                                tpe {
                                                  type: Primitive
                                                  primitiveType: Boolean
                                                }
                                              }
                                            }
                                            then {
                                              type: Block
                                              block {
                                                statement {
                                                  type: Expr
                                                  expr {
                                                    type: MethodCall
                                                    methodCall {
                                                      receiver {
                                                        type: ThisRef
                                                      }
                                                      signature {
                                                        name: "sideeffect"
                                                        owner {
                                                          name: "If"
                                                        }
                                                        returnType {
                                                          type: Void
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            elsee {
                                              type: Block
                                              block {
                                                statement {
                                                  type: If
                                                  ifStat {
                                                    condition {
                                                      type: Binary
                                                      binary {
                                                        op: Equal
                                                        lhs {
                                                          type: VarRef
                                                          varRef {
                                                            name: "x"
                                                          }
                                                        }
                                                        rhs {
                                                          type: Literal
                                                          literal {
                                                            type: Int
                                                            intValue: 5
                                                          }
                                                        }
                                                        tpe {
                                                          type: Primitive
                                                          primitiveType: Boolean
                                                        }
                                                      }
                                                    }
                                                    then {
                                                      type: Block
                                                      block {
                                                        statement {
                                                          type: Expr
                                                          expr {
                                                            type: MethodCall
                                                            methodCall {
                                                              receiver {
                                                                type: ThisRef
                                                              }
                                                              signature {
                                                                name: "sideeffect"
                                                                owner {
                                                                  name: "If"
                                                                }
                                                                returnType {
                                                                  type: Void
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                    elsee {
                                                      type: Block
                                                      block {
                                                        statement {
                                                          type: If
                                                          ifStat {
                                                            condition {
                                                              type: Binary
                                                              binary {
                                                                op: Equal
                                                                lhs {
                                                                  type: VarRef
                                                                  varRef {
                                                                    name: "x"
                                                                  }
                                                                }
                                                                rhs {
                                                                  type: Literal
                                                                  literal {
                                                                    type: Int
                                                                    intValue: 6
                                                                  }
                                                                }
                                                                tpe {
                                                                  type: Primitive
                                                                  primitiveType: Boolean
                                                                }
                                                              }
                                                            }
                                                            then {
                                                              type: Block
                                                              block {
                                                                statement {
                                                                  type: Expr
                                                                  expr {
                                                                    type: MethodCall
                                                                    methodCall {
                                                                      receiver {
                                                                        type: ThisRef
                                                                      }
                                                                      signature {
                                                                        name: "sideeffect"
                                                                        owner {
                                                                          name: "If"
                                                                        }
                                                                        returnType {
                                                                          type: Void
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                            elsee {
                                                              type: Block
                                                              block {
                                                                statement {
                                                                  type: If
                                                                  ifStat {
                                                                    condition {
                                                                      type: Binary
                                                                      binary {
                                                                        op: Equal
                                                                        lhs {
                                                                          type: VarRef
                                                                          varRef {
                                                                            name: "x"
                                                                          }
                                                                        }
                                                                        rhs {
                                                                          type: Literal
                                                                          literal {
                                                                            type: Int
                                                                            intValue: 7
                                                                          }
                                                                        }
                                                                        tpe {
                                                                          type: Primitive
                                                                          primitiveType: Boolean
                                                                        }
                                                                      }
                                                                    }
                                                                    then {
                                                                      type: Block
                                                                      block {
                                                                        statement {
                                                                          type: Expr
                                                                          expr {
                                                                            type: MethodCall
                                                                            methodCall {
                                                                              receiver {
                                                                                type: ThisRef
                                                                              }
                                                                              signature {
                                                                                name: "sideeffect"
                                                                                owner {
                                                                                  name: "If"
                                                                                }
                                                                                returnType {
                                                                                  type: Void
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                    elsee {
                                                                      type: Block
                                                                      block {
                                                                        statement {
                                                                          type: If
                                                                          ifStat {
                                                                            condition {
                                                                              type: Binary
                                                                              binary {
                                                                                op: Equal
                                                                                lhs {
                                                                                  type: VarRef
                                                                                  varRef {
                                                                                    name: "x"
                                                                                  }
                                                                                }
                                                                                rhs {
                                                                                  type: Literal
                                                                                  literal {
                                                                                    type: Int
                                                                                    intValue: 8
                                                                                  }
                                                                                }
                                                                                tpe {
                                                                                  type: Primitive
                                                                                  primitiveType: Boolean
                                                                                }
                                                                              }
                                                                            }
                                                                            then {
                                                                              type: Block
                                                                              block {
                                                                                statement {
                                                                                  type: Expr
                                                                                  expr {
                                                                                    type: MethodCall
                                                                                    methodCall {
                                                                                      receiver {
                                                                                        type: ThisRef
                                                                                      }
                                                                                      signature {
                                                                                        name: "sideeffect"
                                                                                        owner {
                                                                                          name: "If"
                                                                                        }
                                                                                        returnType {
                                                                                          type: Void
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                            elsee {
                                                                              type: Block
                                                                              block {
                                                                                statement {
                                                                                  type: If
                                                                                  ifStat {
                                                                                    condition {
                                                                                      type: Binary
                                                                                      binary {
                                                                                        op: Equal
                                                                                        lhs {
                                                                                          type: VarRef
                                                                                          varRef {
                                                                                            name: "x"
                                                                                          }
                                                                                        }
                                                                                        rhs {
                                                                                          type: Literal
                                                                                          literal {
                                                                                            type: Int
                                                                                            intValue: 9
                                                                                          }
                                                                                        }
                                                                                        tpe {
                                                                                          type: Primitive
                                                                                          primitiveType: Boolean
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                    then {
                                                                                      type: Block
                                                                                      block {
                                                                                        statement {
                                                                                          type: Expr
                                                                                          expr {
                                                                                            type: MethodCall
                                                                                            methodCall {
                                                                                              receiver {
                                                                                                type: ThisRef
                                                                                              }
                                                                                              signature {
                                                                                                name: "sideeffect"
                                                                                                owner {
                                                                                                  name: "If"
                                                                                                }
                                                                                                returnType {
                                                                                                  type: Void
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                    elsee {
                                                                                      type: Block
                                                                                      block {
                                                                                        statement {
                                                                                          type: If
                                                                                          ifStat {
                                                                                            condition {
                                                                                              type: Binary
                                                                                              binary {
                                                                                                op: Equal
                                                                                                lhs {
                                                                                                  type: VarRef
                                                                                                  varRef {
                                                                                                    name: "x"
                                                                                                  }
                                                                                                }
                                                                                                rhs {
                                                                                                  type: Literal
                                                                                                  literal {
                                                                                                    type: Int
                                                                                                    intValue: 10
                                                                                                  }
                                                                                                }
                                                                                                tpe {
                                                                                                  type: Primitive
                                                                                                  primitiveType: Boolean
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                            then {
                                                                                              type: Block
                                                                                              block {
                                                                                                statement {
                                                                                                  type: Expr
                                                                                                  expr {
                                                                                                    type: MethodCall
                                                                                                    methodCall {
                                                                                                      receiver {
                                                                                                        type: ThisRef
                                                                                                      }
                                                                                                      signature {
                                                                                                        name: "sideeffect"
                                                                                                        owner {
                                                                                                          name: "If"
                                                                                                        }
                                                                                                        returnType {
                                                                                                          type: Void
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                            elsee {
                                                                                              type: Block
                                                                                              block {
                                                                                                statement {
                                                                                                  type: If
                                                                                                  ifStat {
                                                                                                    condition {
                                                                                                      type: Binary
                                                                                                      binary {
                                                                                                        op: Equal
                                                                                                        lhs {
                                                                                                          type: VarRef
                                                                                                          varRef {
                                                                                                            name: "x"
                                                                                                          }
                                                                                                        }
                                                                                                        rhs {
                                                                                                          type: Literal
                                                                                                          literal {
                                                                                                            type: Int
                                                                                                            intValue: 11
                                                                                                          }
                                                                                                        }
                                                                                                        tpe {
                                                                                                          type: Primitive
                                                                                                          primitiveType: Boolean
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    then {
                                                                                                      type: Block
                                                                                                      block {
                                                                                                        statement {
                                                                                                          type: Expr
                                                                                                          expr {
                                                                                                            type: MethodCall
                                                                                                            methodCall {
                                                                                                              receiver {
                                                                                                                type: ThisRef
                                                                                                              }
                                                                                                              signature {
                                                                                                                name: "sideeffect"
                                                                                                                owner {
                                                                                                                  name: "If"
                                                                                                                }
                                                                                                                returnType {
                                                                                                                  type: Void
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    elsee {
                                                                                                      type: Block
                                                                                                      block {
                                                                                                        statement {
                                                                                                          type: If
                                                                                                          ifStat {
                                                                                                            condition {
                                                                                                              type: Binary
                                                                                                              binary {
                                                                                                                op: Equal
                                                                                                                lhs {
                                                                                                                  type: VarRef
                                                                                                                  varRef {
                                                                                                                    name: "x"
                                                                                                                  }
                                                                                                                }
                                                                                                                rhs {
                                                                                                                  type: Literal
                                                                                                                  literal {
                                                                                                                    type: Int
                                                                                                                    intValue: 12
                                                                                                                  }
                                                                                                                }
                                                                                                                tpe {
                                                                                                                  type: Primitive
                                                                                                                  primitiveType: Boolean
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            then {
                                                                                                              type: Block
                                                                                                              block {
                                                                                                                statement {
                                                                                                                  type: Expr
                                                                                                                  expr {
                                                                                                                    type: MethodCall
                                                                                                                    methodCall {
                                                                                                                      receiver {
                                                                                                                        type: ThisRef
                                                                                                                      }
                                                                                                                      signature {
                                                                                                                        name: "sideeffect"
                                                                                                                        owner {
                                                                                                                          name: "If"
                                                                                                                        }
                                                                                                                        returnType {
                                                                                                                          type: Void
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            elsee {
                                                                                                              type: Block
                                                                                                              block {
                                                                                                                statement {
                                                                                                                  type: If
                                                                                                                  ifStat {
                                                                                                                    condition {
                                                                                                                      type: Binary
                                                                                                                      binary {
                                                                                                                        op: Equal
                                                                                                                        lhs {
                                                                                                                          type: VarRef
                                                                                                                          varRef {
                                                                                                                            name: "x"
                                                                                                                          }
                                                                                                                        }
                                                                                                                        rhs {
                                                                                                                          type: Literal
                                                                                                                          literal {
                                                                                                                            type: Int
                                                                                                                            intValue: 13
                                                                                                                          }
                                                                                                                        }
                                                                                                                        tpe {
                                                                                                                          type: Primitive
                                                                                                                          primitiveType: Boolean
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                    then {
                                                                                                                      type: Block
                                                                                                                      block {
                                                                                                                        statement {
                                                                                                                          type: Expr
                                                                                                                          expr {
                                                                                                                            type: MethodCall
                                                                                                                            methodCall {
                                                                                                                              receiver {
                                                                                                                                type: ThisRef
                                                                                                                              }
                                                                                                                              signature {
                                                                                                                                name: "sideeffect"
                                                                                                                                owner {
                                                                                                                                  name: "If"
                                                                                                                                }
                                                                                                                                returnType {
                                                                                                                                  type: Void
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                    elsee {
                                                                                                                      type: Block
                                                                                                                      block {
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
member {
  type: Method
  modifiers {
    isPublic: true
  }
  method {
    isConstructor: true
    name: "new"
    returnType {
      type: Named
      namedType {
        name: "If"
      }
    }
    body {
      type: Block
      block {
        statement {
          type: Expr
          expr {
            type: MethodCall
            methodCall {
              receiver {
                type: ThisRef
              }
              signature {
                name: "new"
                owner {
                  pkg: "java.lang"
                  name: "Object"
                }
                returnType {
                  type: Named
                  namedType {
                    pkg: "java.lang"
                    name: "Object"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
